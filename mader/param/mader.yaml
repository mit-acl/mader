# if simulatin or hex? (if is_centralized: true then this doesn't matter)
sim: false

# need take off?
is_take_off: true

# using centralized or decentralized trajs?
is_centralized: false 

# use delay check or not?
is_delaycheck: true

# max number of agents (not the actual number. it's max number of id)
max_agent_number: 10

# camera yawing?
is_camera_yawing: false

# who's the camera man? (if you are camera man is_camera_yawing will be true in mader_ros.cpp)
camera1: "05"
camera2: "07"

# who's the obstacle?
obstacle1: "20"
obstacle2: "20"

w_max: 0.6           # [rd/s] Maximum angular velocity. 0.4 for Hardware
alpha_filter_dyaw: 0.99 # #[] Filter parameter for dyaw, \in [0,1]. Higher--> More aggressive filtering

use_ff: true # use feedforward
visual: true #publish visualization stuff
color_type: "vel" #"vel" or "plain"

n_agents: 10

dc: 0.01            #(seconds) Duration for the interpolation=Value of the timer pubGoal
<<<<<<< HEAD
goal_radius: 0.05    #(m) Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS
drone_radius: 0.25  #(m) Used for collision checking # not used anymore replaced by drone_bbox
drone_bbox: [0.7, 0.7, 0.9] #(m) Used for collision checking replacing drone_radius. The bounding box dimension [x y z]

Ra: 10.0           # [m] Radius of my planning sphere (planning horizon). Should be < fov_depth
obs_Ra: 20.0           # [m] Radius of my planning sphere (planning horizon). Should be < fov_depth

delay_check: 0.05 # seconds
simulated_comm_delay: 0.0 #seconds
comm_delay_param: 1.0
=======
goal_radius: 0.15    #(m) Drone has arrived to the goal when distance_to_goal<GOAL_RADIUS
drone_radius: 0.05  #(m) Used for collision checking

#w_max: 5.0           # [rd/s] Maximum angular velocity. 0.4 for Hardware
w_max: 2.5

alpha_filter_dyaw: 0 # #[] Filter parameter for dyaw, \in [0,1]. Higher--> More aggressive filtering
>>>>>>> a15376be0e2f329ed0164b9a5fc544e57d1391b2

# x_min: -1000000000.0  # [m] don't forget the .0
# x_max: 1000000000.0  # [m] don't forget the .0

# y_min: -1000000000.0  # [m] don't forget the .0
# y_max: 1000000000.0   # [m] don't forget the .0

# z_min: -1000000000.0  # [m] points below this are considered ground
# z_max: 1000000000.0   # [m] JPS is not allowed to give a solution that goes higher than this height

# highbay
x_min: -4.3  # [m] don't forget the .0
x_max: 4.8  # [m] don't forget the .0

y_min: -3.5  # [m] don't forget the .0
y_max: 4.0   # [m] don't forget the .0

z_min: 1.0  # [m] don't forget the .0
z_max: 3.5  # [m] don't forget the .0

#For single-agent simulations
<<<<<<< HEAD
=======
v_max: [3.5, 3.5, 3.5]   #[m/s]  7.0
a_max: [20.0, 20.0, 9.6]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
j_max: [30.0, 30.0, 30.0]   #[m/s3]  #Right now it's only used for Gurobi, not for NLOPT
>>>>>>> a15376be0e2f329ed0164b9a5fc544e57d1391b2

# v_max: [10.0, 10.0, 10.0]   #[m/s]  7.0
# a_max: [20.0, 20.0, 20.0]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
# j_max: [30.0, 30.0, 30.0]   #[m/s3]  #Right now it's only used for Gurobi, not for NLOPT

v_max: [4.0, 4.0, 4.0]   #[m/s]  7.0
a_max: [5.0, 5.0, 5.0]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
j_max: [6.0, 6.0, 6.0]   #[m/s3]  #Right now it's only used for Gurobi, not for NLOPT

#For obstacles
obs_v_max: [0.5, 0.5, 0.5]   #[m/s]  7.0
obs_a_max: [1.0, 1.0, 1.0]   #[m/s2] Note that if a_max.z() > 9.81, the drone may flip
obs_j_max: [1.0, 1.0, 1.0]   #[m/s3]  #Right now it's only used for Gurobi, not for NLOPT

factor_alpha: 4.5 #[-] DeltaT = factor_alpha*States_took_previous_replan

#Parameters for NLOPT
num_pol: 4
deg_pol: 3 #Only 3 is supported right now
weight: 10.0 #The .0 is needed #1000.0 was default 
epsilon_tol_constraints: 0.000001
xtol_rel: 0.0000000000001 #negative value --> stopping criterion not used
ftol_rel: 0.0000000001 #negative value --> stopping criterion not used
solver: "LD_MMA"

#Other possible solvers:
# LD_MMA, LD_CCSAQ, LN_NELDERMEAD,  LD_LBFGS, LD_VAR2, LD_AUGLAG, LD_SLSQP, LN_SBPLX, LN_PRAXIS, ...
# LD_AUGLAG_EQ, LN_BOBYQA, LN_NEWUOA, LN_NEWUOA_BOUND, LN_COBYLA, LD_CCSAQ, LD_TNEWTON_PRECOND_RESTART, ...
# LD_TNEWTON_RESTART, LD_TNEWTON_PRECOND, LD_VAR1, LD_LBFGS_NOCEDAL, COBYLA

# kappa + mu <=1 Ideally kappa + mu<1 (so that there is time for other stuff)
upper_bound_runtime_snlopt: 0.5 #[seconds] snlopt (init guess + solver) will never take longer than this amount of seconds
lower_bound_runtime_snlopt: 0.05 #[seconds] snlopt (init guess + solver) will never take less than this amount of seconds
kappa: 0.4 #% of time spent to find initial guess
mu: 0.4    #% of time spent to solve the optimization

# Samples in velocity for the A* guess used in the nlopt optimization problem
a_star_samp_x: 5 # odd number
a_star_samp_y: 5 # odd number 
a_star_samp_z: 5 # odd number
a_star_fraction_voxel_size: 0.5 #\in [0,1] The higher, the bigger the voxel size in A* is(i.e. more prunning)
allow_infeasible_guess: true  #whether allow infeasible guesses to be used for the optimization. If false, straight line guess will be used in the case of an infeasible guess

a_star_bias: 0.1 #Bias (cost=g+bias*h) in the A* search #default is 1.0

basis: "MINVO"  #MINVO OR B_SPLINE or BEZIER.  This is the basis used for collision checking

res_plot_traj: 15.0  #Higher --> More resolution when plotting the trajectory 

factor_alloc: 1.0 #>=1. Used to find the total duration of a given trajectory.
factor_alloc_close: 1.5 #>=1. Used to find the total duration of a given trajectory.
dist_factor_alloc_close: 2.0 #>=1. When dist to goal is < than this, the factor_alloc_close is used (instead of factor_alloc)

alpha_shrink: 0.95 #\in [0,1] Only used for MINVO/Bezier

alpha: 0.0 #[m] Error in position
beta: 0.0 #[m] Deviation between the trajectory and the segment between two discretization points
gamma: 0.1 #[seconds] >0 Time step between discretization points

##### Not used right now in the MADER algorithm
fov_horiz_deg: 100 #[deg] \in (0,180] ,  angle between two faces of the tetrahedron 
fov_vert_deg: 100 #[deg] \in (0,180] ,  angle between two faces of the tetrahedron 
fov_depth: 4.5 #[m] Should be < Ra
